# Version variables
AVH_MAJOR=""
AVH_MINOR=""
AVH_PATCH_LEVEL=""
AVH_PRE_RELEASE=""
AVH_VERSION=""

# Colors
RED=`printf '\033[1;31m'`
GREEN=`printf '\033[1;32m'`
WHITE=`printf '\033[1;37m'`
GREY=`printf '\033[1;36m'`

# Icons
CHECK=`printf ${GREEN}'✔'${WHITE}`
CROSS=`printf ${RED}'✘'${WHITE}`

# Modules directory
HOOKS_MODULES_DIR="$HOOKS_DIR"/modules

REPO_DIR="$(git rev-parse --show-toplevel 2>/dev/null)"
if [ ! -f "$REPO_DIR"/.git/hooks_config ]; then
	echo "\n${CROSS}${RED} Missing file "$REPO_DIR"/.git/hooks_config"
	exit 127
fi
. "$REPO_DIR"/.git/hooks_config

type _update_version >/dev/null 2>&1;
if [ $? -eq 127 ]; then
	echo "\n${CROSS}${RED} Missing function _update_version!\nThis function should be declared in "$REPO_DIR"/.git/hooks_config"
	exit 127
fi

git config gitflow.hotfix.finish.message "Release: %%TAG_VERSION%%"
git config gitflow.release.finish.message "Release: %%TAG_VERSION%%"

gitflow_update_version() {
	if [ -n "$2" ]; then
		MSG="$2"
	else
		MSG="Version bump $1"
	fi
	_update_version $1
	git commit -a -m "$MSG"
}

gitflow_set_major_minor() {
	local TEMP_VERSION=$1
	AVH_MAJOR=$(echo "$TEMP_VERSION" | cut -f1 -d".")
	if $(gitflow_contains "$TEMP_VERSION" "."); then
		TEMP_VERSION=$(echo ${TEMP_VERSION#*.})
		AVH_MINOR=$(echo "$TEMP_VERSION" | cut -f1 -d"."|cut -f1 -d"-")
		if [ -z $AVH_MINOR ]; then
			AVH_MINOR=0
			AVH_PATCH_LEVEL=0
		else
			if $(gitflow_contains "$TEMP_VERSION" "."); then
				TEMP_VERSION=$(echo ${TEMP_VERSION#*.})
				AVH_PATCH_LEVEL=$(echo "$TEMP_VERSION" | cut -f1 -d"."|cut -f1 -d"-")
				[ -z $AVH_PATCH_LEVEL ] && AVH_PATCH_LEVEL=0
			else
				AVH_PATCH_LEVEL=0
			fi
		fi
	else
		AVH_MINOR=0
		AVH_PATCH_LEVEL=0
	fi
	AVH_VERSION=$AVH_MAJOR.$AVH_MINOR.$AVH_PATCH_LEVEL
}

gitflow_build_version() {
	AVH_VERSION=$AVH_MAJOR.$AVH_MINOR.$AVH_PATCH_LEVEL
	[ -n AVH_PRE_RELEASE ] && AVH_VERSION=$AVH_VERSION$AVH_PRE_RELEASE
}

#
# Set the pre-release, it counts all commits but not the one in master
#
gitflow_set_dev_release() {
	AVH_PRE_RELEASE_PREFIX_DEV=${AVH_PRE_RELEASE_PREFIX_DEV:="-dev."}
	AVH_PRE_RELEASE=${AVH_PRE_RELEASE_PREFIX_DEV}$(git rev-list --count HEAD ^"$MASTER_BRANCH")
}

#
# Set the rc-release, it counts all commits but not the one in master
#
gitflow_set_rc_release() {
	AVH_PRE_RELEASE_PREFIX_RC=${AVH_PRE_RELEASE_PREFIX_RC:="-rc."}
	RC_LEVEL=$(echo ${AVH_VERSION$AVH_PRE_RELEASE_PREFIX_RC#*$AVH_PRE_RELEASE_PREFIX_RC})
	[ -z $RC_LEVEL ] && RC_LEVEL=0
	RC_LEVEL=$(($RC_LEVEL+1))
	AVH_PRE_RELEASE=${AVH_PRE_RELEASE_PREFIX_RC}${RC_LEVEL}
}

gitflow_get_current_version() {
	CURRENT_VERSION=$(grep -m1 "#### " $ROOTDIR/$CHANGELOG_FILE | cut -f2 -d" ")
	echo "$CURRENT_VERSION"
}

gitflow_get_stable_version() {
	current_branch=$(git rev-parse --abbrev-ref HEAD)
	git checkout -q "$MASTER_BRANCH"
	STABLE_VERSION=$(grep -m1 "#### " $ROOTDIR/$CHANGELOG_FILE | cut -f2 -d" ")
	git checkout -q $current_branch
	echo "$STABLE_VERSION"
}
#
# Create an up to date AUTHORS file
#
gitflow_update_authors() {
	ROOTDIR=$(git rev-parse --show-toplevel)
	AUTHORS=$(mktemp --suffix=.gitflow)

	# Create an up to date AUTHORS file
	echo "$AUTHORS_HEADER" > $AUTHORS
	git shortlog -ns --no-merges | cut -f2 >> $AUTHORS
	echo "$AUTHORS_FOOTER" >> $AUTHORS

	# Check if the new file is different
	# If it's not there is no need to copy it and commit
	diff $AUTHORS $ROOTDIR/AUTHORS > /dev/null 2>&1
	DIFF=$?
	if [ $DIFF -ne 0 ]; then
		cp $AUTHORS $ROOTDIR/AUTHORS
		git commit AUTHORS -m "Update of the contributers."
	fi
	# Clean up
	rm  $AUTHORS
}


#
# String contains function
# $1 haystack
# $2 Needle
#
gitflow_contains() {
	local return

	case $1 in
		*$2*)
			return=0
			;;
		*)
			return=1
			;;
	esac
	return $return
}

gitflow_fail() {
	echo "\t"${CROSS} ${GREY}$1${WHITE}
}

gitflow_ok() {
	echo "\t"${CHECK} ${GREY}$1${WHITE}
}

h1() {
	echo "\n${WHITE}$1 ...\n"
}

# Function to get a list of files that will be committed by extension
# you can for example do "$(commit_files js css)" to get a list of js and css files that will be committed
gitflow_commit_files() {

	if [ $# -eq 0 ] ; then
	    echo $(git diff-index --name-only --diff-filter=ACM --cached HEAD --)
	    exit 0
	fi

	extensions=''
	for extension in "$@"
	do
		extensions="${extensions}(${extension})|"
	done
	regex="\.(${extensions%?})$"
	echo $(git diff-index --name-only --diff-filter=ACM --cached HEAD -- | grep -P "$regex")
}

gitflow_count_commit_files() {
	echo $(gitflow_commit_files $@) | wc -w | tr -d ' '
}
